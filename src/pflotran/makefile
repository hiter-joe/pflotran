###############################################################################
# PFLOTRAN makefile
#
# Before building make sure that the environmental variables
#   PETSC_DIR and PETSC_ARCH are defined.
#
# To build PFLOTRAN from within the source directory, run, e.g.:
#   cd $PFLOTRAN_DIR/src/pflotran
#   make pflotran
# this will generate the executable and object files in the source directory.
# 
# To have the object/executable files placed in a separate directory,
# run make from the target directory and specify the makefile and 
# source directory locations to make, e.g.:
#  mkdir -p $PFLOTRAN_DIR/build/$PETSC_ARCH
#  cd $PFLOTRAN_DIR/build/$PETSC_ARCH
#  make -f $PFLOTRAN_DIR/src/pflotran/makefile SRC_DIR=$PFLOTRAN_DIR/src/pflotran pflotran
#
# Targets:
# pflotran -- the complete PFLOTRAN executable
# libpflotranchem.a -- PFLOTRAN reaction library
# pflotran_rxn -- PFLOTRAN batch reactor executable (wraps libpflotranchem.a)
# test -- run unit (utest) and regression (rtest) tests
# check -- verify that PFLOTRAN was built correctly and runs
# clean-tests -- remove the output generated by tests
# clean-pflotran -- remove .o, .mod, and other build files 
# echo-flags -- print the make and compiler flags to be used
#
###############################################################################

# PFLOTRAN source directory -- default to the current directory
SRC_DIR = ./

# make option to search for source files in $SRC_DIR
VPATH = $(SRC_DIR)

pflotran_src =
common_src   =
regression_test_dir = $(SRC_DIR)/../../regression_tests
unit_test_dir = $(SRC_DIR)/unittests

# Import variables/options/rules from PETSc.
include ${PETSC_DIR}/lib/petsc/conf/variables
include ${PETSC_DIR}/lib/petsc/conf/rules
# Those files also include 
# ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables
# and 
# ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscrules
# so that PFLOTRAN will be built with the same options as 
# the petsc configured in $PETSC_DIR/$PETSC_ARCH

MYFLAGS = -I. 

###############################################################################
# Preprocessor flags for special PFLOTRAN features/hacks
###############################################################################

# if compiling pflotran_rxn or libpflotranchem.a, need to toggle 
# PFLOTRAN_RXN_FLAG 
ifneq (,$(filter libpflotranchem.a pflotran_rxn,$(MAKECMDGOALS)))
  PFLOTRAN_RXN_FLAG := 1
endif

ifdef match_tough2
  MYFLAGS += ${FC_DEFINE_FLAG}MATCH_TOUGH2
endif

ifdef uo2
  MYFLAGS += ${FC_DEFINE_FLAG}COMPUTE_INTERNAL_MASS_FLUX
endif

ifdef fmdm
  MYFLAGS += ${FC_DEFINE_FLAG}FMDM_MODEL
endif

ifdef glenn
#  MYFLAGS += ${FC_DEFINE_FLAG}XINGYUAN_BC
#  MYFLAGS += ${FC_DEFINE_FLAG}BROADCAST_DATASET
endif

ifdef ye_flux
  MYFLAGS += ${FC_DEFINE_FLAG}YE_FLUX
endif

ifdef solid_solution
  MYFLAGS += ${FC_DEFINE_FLAG}SOLID_SOLUTION
endif

ifdef dbl
  MYFLAGS += ${FC_DEFINE_FLAG}DOUBLE_LAYER
endif

ifdef pcl
  MYFLAGS += ${FC_DEFINE_FLAG}PCL ${FC_DEFINE_FLAG}MUALEM_SPLINE
endif

ifdef condnr
  MYFLAGS += ${FC_DEFINE_FLAG}CONDNR
endif

ifdef temp
  MYFLAGS += ${FC_DEFINE_FLAG}TEMP_DEPENDENT_LOGK
endif

ifdef remove_sat
  MYFLAGS += ${FC_DEFINE_FLAG}REMOVE_SATURATION
endif

ifdef no_vapor_diffusion
  MYFLAGS += ${FC_DEFINE_FLAG}NO_VAPOR_DIFFUSION
endif

ifdef debug_gen
  MYFLAGS += ${FC_DEFINE_FLAG}DEBUG_GENERAL
  ifeq ($(debug_gen),2)
    MYFLAGS += ${FC_DEFINE_FLAG}DEBUG_GENERAL_INFO
  endif
endif 

ifdef coll
  MYFLAGS += ${FC_DEFINE_FLAG}COLL
endif

ifdef have_hdf5
  MYFLAGS += -I$(HDF5_INCLUDE) -I$(HDF5_LIB) ${FC_DEFINE_FLAG}PETSC_HAVE_HDF5
endif

ifdef ugrid_debug
  MYFLAGS += ${FC_DEFINE_FLAG}UGRID_DEBUG
endif

ifdef amanzi_bgd
  MYFLAGS += ${FC_DEFINE_FLAG}AMANZI_BGD
endif

ifdef surface_th_debug
  MYFLAGS += ${FC_DEFINE_FLAG}SURFACE_TH_DEBUG
endif

ifdef th_bc_hack
  MYFLAGS += ${FC_DEFINE_FLAG}THDIRICHLET_TEMP_BC_HACK
endif

ifdef debug
  MYFLAGS += ${FC_DEFINE_FLAG}DEBUG
endif

ifdef use_matseqaij_fix
  MYFLAGS += ${FC_DEFINE_FLAG}USE_MATSEQAIJ_FIX
endif

ifdef debug_geomech_regression
  MYFLAGS += ${FC_DEFINE_FLAG}GEOMECHANICS_REGRESSION_DEBUG
endif

ifdef geomech_debug
  MYFLAGS += ${FC_DEFINE_FLAG}GEOMECH_DEBUG
endif

UPDATE_PROVENANCE=0
ifdef provenance
  UPDATE_PROVENANCE=1
endif

ifdef well_debug
  MYFLAGS += ${FC_DEFINE_FLAG}WELL_DEBUG
endif

ifdef towg_debug
  MYFLAGS += ${FC_DEFINE_FLAG}TOWG_DEBUG
endif

ifdef well_class
  MYFLAGS += ${FC_DEFINE_FLAG}WELL_CLASS
endif

ifdef have_hdf5
LIBS +=  -L${HDF5_LIB} -lhdf5_fortran -lhdf5 -lz 
endif

# Set this accordingly on your platform
# SCORPIO_DIR=${HOME}/soft/scorpio
ifdef scorpio
  LIBS += -L${SCORPIO_DIR}/lib -lscorpio
  MYFLAGS += ${FC_DEFINE_FLAG}SCORPIO
  MYFLAGS += ${FC_DEFINE_FLAG}SCORPIO_WRITE
  MYFLAGS += -I${SCORPIO_DIR}/include
endif

ifdef tau
FC = /ccs/proj/geo002/tau/tau-2.19.1/craycnl/bin/tau_f90.sh -optCompInst -tau_makefile=$(TAU_MAKEFILE)
FLINKER = /ccs/proj/geo002/tau/tau-2.19.1/craycnl/bin/tau_f90.sh -optCompInst -tau_makefile=$(TAU_MAKEFILE)
endif

###############################################################################
# Assign additional compiler/preprocessor flags
###############################################################################

# These flags are supplemental to the PETSc flags
CFLAGS   =
FFLAGS   =
CPPFLAGS = ${MYFLAGS}
FPPFLAGS = ${MYFLAGS}

# In ${PETSC_DIR}/lib/petsc/conf/variables, 
# FPPFLAGS is appended to FCPPFLAGS.
# FCPPFLAGS is then used when compiling .F90 files.
# Similarly, CPPFLAGS is appended to CCPPFLAGS
#
# PETSc (${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscrules) defines
# the default rule for compiling .F90 files:
#.F.o .F90.o .F95.o: 
#	${FC} -c ${FC_FLAGS} ${FFLAGS} ${FCPPFLAGS} -o $@ $<
#
# FC_FLAGS is defined in ${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables

# List of files to remove when running "make clean-pflotran"
CLEANFILES       = pflotran pflotran_rxn libpflotranchem.a make.log $(SRC_DIR)/pflotran_provenance.F90

###############################################################################
# Lists all files that PFLOTRAN (and other targets) depends on 
#
# '# Begin Source Block' and '# End Source Block' are keywords that bound the
# .o files.  The python script PFLOTRAN_DIR/src/python/pflotran_dependencies.py
# creates a list of source files associated with all .o files and parses them
# to create the list of dependencies included below.
#
###############################################################################

# Begin Source Block -- these keywords must remain immediately before .o files.

util_obj  = \
        ${common_src}appleyard.o \
	${common_src}input_aux.o \
	${common_src}logging.o \
	${common_src}matrix_block_aux.o \
	${common_src}option.o \
	${common_src}option_flow.o \
	${common_src}option_transport.o \
	${common_src}output_aux.o \
	${common_src}pflotran_constants.o \
	${common_src}pflotran_provenance.o \
	${common_src}string.o \
	${common_src}units.o \
	${common_src}utility.o \
        ${common_src}toil_ims_derivs.o \
	${common_src}variables.o

eos_obj = \
	${common_src}co2_sw.o \
	${common_src}co2_span_wagner_spline.o \
	${common_src}eos.o \
	${common_src}eos_database.o \
	${common_src}eos_gas.o \
	${common_src}eos_oil.o \
	${common_src}gas_eos_mod.o 

mode_aux_obj = \
	${common_src}auxiliary.o \
	${common_src}auxvars_base.o \
	${common_src}auxvars_flow.o \
	${common_src}auxvars_flow_energy.o \
	${common_src}auxvars_toil_ims.o \
	${common_src}auxvars_towg.o \
	${common_src}flash2_aux.o \
	${common_src}general_aux.o \
	${common_src}wipp_flow_aux.o \
	${common_src}pm_base_aux.o \
	${common_src}pm_toil_ims_aux.o \
	${common_src}pm_towg_aux.o \
	${common_src}immis_aux.o \
	${common_src}miscible_aux.o \
	${common_src}mphase_aux.o \
	${common_src}pm_auxiliary.o \
	${common_src}pm_base.o \
	${common_src}pm_base_pointer.o \
	${common_src}pm_general.o \
	${common_src}pm_wipp_flow.o \
	${common_src}pm_bragflo.o \
	${common_src}pm_toil_ims.o \
	${common_src}pm_towg.o \
	${common_src}pm_flash2.o \
	${common_src}pm_immis.o \
	${common_src}pm_mphase.o \
	${common_src}pm_miscible.o \
	${common_src}pm_richards.o \
	${common_src}pm_rt.o \
	${common_src}pm_subsurface_flow.o \
	${common_src}pm_surface_flow.o \
	${common_src}pm_surface_th.o \
	${common_src}pm_surface.o \
	${common_src}pm_th.o \
	${common_src}pm_ufd_decay.o \
	${common_src}pm_waste_form.o \
	${common_src}pm_wipp_srcsink.o \
	${common_src}pm_ufd_biosphere.o \
	${common_src}richards_aux.o \
	${common_src}th_aux.o \
	${common_src}inlinesurface_aux.o

mode_obj = \
	${common_src}flash2.o \
	${common_src}general.o \
	${common_src}general_common.o \
	${common_src}wipp_flow.o \
	${common_src}wipp_flow_common.o \
	${common_src}bragflo.o \
	${common_src}bragflo_common.o \
	${common_src}toil_ims.o \
	${common_src}towg.o \
	${common_src}global.o \
	${common_src}immis.o \
	${common_src}miscible.o \
	${common_src}mphase.o \
	${common_src}reactive_transport.o \
	${common_src}richards.o \
	${common_src}richards_common.o \
	${common_src}th.o \
	${common_src}inlinesurface.o

shared_mode_aux_obj = \
	${common_src}co2eos.o \
	${common_src}co2_span_wagner.o \
	${common_src}co2_sw_rtsafe.o \
	${common_src}eos_water.o \
	${common_src}geometry.o \
	${common_src}global_aux.o \
	${common_src}material_aux.o \
	${common_src}reactive_transport_aux.o 

chem_obj = \
	${common_src}transport_constraint.o \
	${common_src}reaction_database.o \
	${common_src}reaction_database_aux.o \
	${common_src}reaction_database_hpt.o \
	${common_src}reaction_gas.o \
	${common_src}reaction_gas_aux.o \
	${common_src}reaction_immobile.o \
	${common_src}reaction_immobile_aux.o \
	${common_src}reaction_microbial.o \
	${common_src}reaction_microbial_aux.o \
	${common_src}reaction_mineral.o \
	${common_src}reaction_mineral_aux.o \
	${common_src}reaction.o \
	${common_src}reaction_aux.o \
	${common_src}reaction_clm.o \
	${common_src}reaction_sandbox.o \
	${common_src}reaction_sandbox_base.o \
	${common_src}reaction_sandbox_clm_cn.o \
	${common_src}reaction_sandbox_example.o \
	${common_src}reaction_sandbox_pnnl_cyber.o \
	${common_src}reaction_sandbox_simple.o \
	${common_src}reaction_sandbox_ufd_wp.o \
	${common_src}reaction_solid_solution.o \
	${common_src}reaction_solid_solution_aux.o \
	${common_src}reaction_surf_complex.o \
	${common_src}reaction_surf_complex_aux.o 

grid_obj = \
	${common_src}connection.o \
	${common_src}communicator_base.o \
	${common_src}communicator_structured.o \
	${common_src}communicator_unstructured.o \
	${common_src}discretization.o \
	${common_src}dm_kludge.o \
	${common_src}grid.o \
	${common_src}grid_structured.o \
	${common_src}grid_unstructured_cell.o \
	${common_src}grid_unstructured_explicit.o \
	${common_src}grid_unstructured_aux.o \
	${common_src}grid_unstructured.o \
	${common_src}grid_unstructured_polyhedra.o

relations_obj = \
	${common_src}saturation.o \
	${common_src}saturation_function.o \
	${common_src}characteristic_curves.o \
	${common_src}characteristic_curves_base.o \
	${common_src}characteristic_curves_common.o \
	${common_src}characteristic_curves_owg.o \
	${common_src}characteristic_curves_wipp.o \
	${common_src}mphase_pckr_mod.o

properties_obj = \
	${common_src}fluid.o \
	${common_src}material.o 

dataset_obj = \
	${common_src}dataset_ascii.o \
	${common_src}dataset_base.o \
	${common_src}dataset_common_hdf5.o \
	${common_src}dataset_global_hdf5.o \
	${common_src}dataset_map_hdf5.o \
	${common_src}dataset.o \
	${common_src}dataset_gridded_hdf5.o \
	${common_src}time_storage.o 

srcsink_obj = \
	${common_src}srcsink_sandbox.o \
	${common_src}srcsink_sandbox_base.o \
	${common_src}srcsink_sandbox_mass_rate.o \
	${common_src}srcsink_sandbox_downreg.o \
	${common_src}srcsink_sandbox_wipp_gas.o \
	${common_src}srcsink_sandbox_wipp_well.o

io_obj = \
	${common_src}hdf5.o \
	${common_src}hdf5_aux.o \
	${common_src}output.o \
	${common_src}output_common.o \
	${common_src}output_ekg.o \
	${common_src}output_hdf5.o \
	${common_src}output_observation.o \
	${common_src}output_surface.o \
	${common_src}output_tecplot.o \
	${common_src}output_vtk.o

misc_obj = \
	${common_src}block_solve.o \
	${common_src}block_tridiag.o \
	${common_src}checkpoint.o \
	${common_src}condition.o \
	${common_src}condition_control.o \
	${common_src}convergence.o \
	${common_src}coupler.o \
	${common_src}data_mediator.o \
	${common_src}data_mediator_dataset.o \
	${common_src}data_mediator_vec.o \
	${common_src}data_mediator_base.o \
	${common_src}debug.o \
	${common_src}e4d_mat_inv.o \
	${common_src}e4d_run.o \
	${common_src}e4d_setup.o \
	${common_src}e4d_vars.o \
	${common_src}factory_hydrogeophysics.o \
	${common_src}factory_pflotran.o \
	${common_src}factory_subsurface.o \
	${common_src}field.o \
	${common_src}hydrostatic.o \
	${common_src}hydrostatic_common.o \
	${common_src}hydrostatic_multi_phase.o \
	${common_src}init_common.o \
	${common_src}init_subsurface.o \
	${common_src}init_subsurface_flow.o \
	${common_src}init_subsurface_transport.o \
	${common_src}integral_flux.o \
	${common_src}lookup_table.o \
	${common_src}matrix_buffer.o \
	${common_src}multisimulation.o \
	${common_src}observation.o \
	${common_src}patch.o \
	${common_src}pmc_auxiliary.o \
	${common_src}pmc_base.o \
	${common_src}pmc_hydrogeophysics.o \
	${common_src}pmc_subsurface.o \
	${common_src}pmc_third_party.o \
	${common_src}realization_base.o \
	${common_src}realization_subsurface.o \
	${common_src}region.o \
	${common_src}regression.o \
	${common_src}secondary_continuum_aux.o\
	${common_src}secondary_continuum.o \
	${common_src}simulation_aux.o \
	${common_src}simulation_base.o \
	${common_src}simulation_hydrogeophysics.o \
	${common_src}simulation_subsurface.o \
	${common_src}spline.o \
	${common_src}strata.o \
	${common_src}timestepper_base.o \
	${common_src}timestepper_BE.o \
	${common_src}transport.o \
	${common_src}uniform_velocity.o \
	${common_src}waypoint.o \
	${common_src}wipp.o \
	${common_src}wrapper_hydrogeophysics.o

well_obj = \
	${common_src}well_spec_base.o \
	${common_src}well_base.o \
	${common_src}well_flow.o \
	${common_src}well_flow_energy.o \
	${common_src}well_water_injector.o \
	${common_src}well_oil_producer.o \
	${common_src}well_toil_ims.o \
	${common_src}well.o

surface_obj = \
	${common_src}checkpoint_surface.o \
	${common_src}factory_surface.o \
	${common_src}factory_surfsubsurface.o \
	${common_src}init_surface.o \
	${common_src}pmc_surface.o \
	${common_src}simulation_surface.o \
	${common_src}simulation_surfsubsurface.o \
	${common_src}surface_auxiliary.o \
	${common_src}surface_field.o \
	${common_src}surface_flow.o \
	${common_src}surface_global_aux.o \
	${common_src}surface_global.o \
	${common_src}surface_material.o \
	${common_src}realization_surface.o \
	${common_src}surface_th_aux.o \
	${common_src}surface_th.o \
	${common_src}timestepper_surface.o

geomech_obj = \
	${common_src}factory_geomechanics.o \
	${common_src}gauss.o \
	${common_src}geomechanics_auxiliary.o \
	${common_src}geomechanics_realization.o \
	${common_src}geomechanics_discretization.o \
	${common_src}geomech_grid.o \
	${common_src}geomech_grid_aux.o \
	${common_src}geomechanics_condition.o \
	${common_src}geomechanics_coupler.o \
	${common_src}geomechanics_debug.o \
	${common_src}geomechanics_field.o \
	${common_src}geomechanics_force.o \
	${common_src}geomechanics_global.o \
	${common_src}geomechanics_global_aux.o\
	${common_src}geomechanics_material.o \
	${common_src}geomechanics_patch.o \
	${common_src}geomechanics_region.o \
	${common_src}geomechanics_regression.o \
	${common_src}geomechanics_strata.o \
	${common_src}geomechanics_subsurface_properties.o \
	${common_src}output_geomechanics.o \
	${common_src}pm_geomechanics_force.o \
	${common_src}pmc_geomechanics.o \
	${common_src}simulation_geomechanics.o \
	${common_src}shape_function.o \
	${common_src}timestepper_steady.o

solver_obj = \
	${common_src}preconditioner_cpr.o \
	${common_src}solver.o \
	${common_src}solver_cpr.o

# End Source Block -- these keywords must remain immediately after .o files.

###############################################################################
# Targets
###############################################################################

# Concatentate dependency groups 
pflotran_obj = $(util_obj) $(eos_obj) $(mode_aux_obj) $(mode_obj) \
	$(shared_mode_aux_obj) $(chem_obj) $(geomech_obj) $(well_obj) \
	$(grid_obj) $(relations_obj) $(properties_obj) $(dataset_obj) \
	$(srcsink_obj) $(io_obj) $(misc_obj) $(surface_obj) $(solver_obj) \
	${pflotran_src}pflotran.o

pflotran_rxn_obj = ${pflotran_src}pflotran_rxn.o

# PFLOTRAN executable
pflotran : $(pflotran_obj)
	${FLINKER} -o pflotran $(pflotran_obj) ${PETSC_LIB} ${LIBS} 

# PFLOTRAN as a library
libpflotran.a : $(pflotran_obj)
	$(AR) $(ARFLAGS) $@ $(pflotran_obj)

libpflotranchem.a : $(util_obj) $(shared_mode_aux_obj) $(chem_obj)
	$(AR) $(ARFLAGS) $@ $(util_obj) $(shared_mode_aux_obj) $(chem_obj)

pflotran_rxn : libpflotranchem.a $(pflotran_rxn_obj)
	${FLINKER} -o $@ $(pflotran_rxn_obj) -L. -lpflotranchem ${PETSC_LIB} ${LIBS} 

$(SRC_DIR)/pflotran_provenance.F90 : FORCE
ifeq ($(UPDATE_PROVENANCE),1)
	@-rm pflotran_provenance.o pflotran_provenance_module.mod $(SRC_DIR)/pflotran_provenance.F90; \
	$(PYTHON) $(SRC_DIR)/pflotran-provenance.py \
		--pflotran-fflags "${FC_FLAGS} ${FFLAGS} ${FCPPFLAGS}" \
		--petsc-config "${CONFIGURE_OPTIONS}";
else
	@if test ! -f $(SRC_DIR)/pflotran_provenance.F90; then cp $(SRC_DIR)/pflotran_no_provenance.F90 $(SRC_DIR)/pflotran_provenance.F90; fi;
endif

###############################################################################
# Dependencies
# Dependencies stemming from "use" statements.
# These ensure that the module files are built in the correct order.
# The source file (i.e. file.F90) is intentionally omitted; 
# it is picked up by the default/implicit build rule (defined by PETSc)
###############################################################################
include pflotran_dependencies.txt
###############################################################################
# End Dependencies
###############################################################################


###############################################################################
# Other targets (clean, testing, etc)
###############################################################################

# developer level regression testing
test : utest rtest

utest : pflotran
	@if [ -d $(unit_test_dir) ]; then \
		$(MAKE) --directory=$(unit_test_dir) EXE_DIR=${PWD} test; \
	fi

rtest : pflotran
	@if [ -d $(regression_test_dir) ]; then \
		$(MAKE) --directory=$(regression_test_dir) PFLOTRAN=${PWD}/pflotran test; \
	fi

clean-tests : FORCE
	@if [ -d $(unit_test_dir) ]; then \
		$(MAKE) --directory=$(unit_test_dir) EXE_DIR=${PWD} $(MAKECMDGOALS); \
	fi
	@if [ -d $(regression_test_dir) ]; then \
		$(MAKE) --directory=$(regression_test_dir) PFLOTRAN=${PWD}/pflotran $(MAKECMDGOALS); \
	fi

# user level tests to verify pflotran is built correctly
check : FORCE
	@if [ -d $(regression_test_dir) ]; then \
		$(MAKE) --directory=$(regression_test_dir) PFLOTRAN=${PWD}/pflotran $(MAKECMDGOALS); \
	fi

clean-pflotran :
	-rm -f $(CLEANFILES) *.o *.mod *.a;

# Flags
echo-flags :
	@echo ; \
	echo "PFLOTRAN source"; \
	echo "SRC_DIR = $(SRC_DIR)"; \
	echo ; \
	echo "PETSc environment"; \
	echo "PETSC_DIR = $(PETSC_DIR)"; \
	echo "PETSC_ARCH = $(PETSC_ARCH)"; \
	echo ; \
	echo "Flags defined in this makefile"; \
	echo "CFLAGS = $(CFLAGS)"; \
	echo "FFLAGS = $(FFLAGS)"; \
	echo ; \
	echo "MYFLAGS = $(MYFLAGS)"; \
	echo "CPPFLAGS = $(CPPFLAGS)"; \
	echo "FPPFLAGS = $(FPPFLAGS)"; \
	echo ; \
	echo "Flags invoked when compiling fortran source"; \
	echo "FC_FLAGS = $(FC_FLAGS)"; \
	echo "FFLAGS = $(FFLAGS)"; \
	echo "FCPPFLAGS =  $(FCPPFLAGS)"; \
	echo ; \
	echo "Included Libraries" ;\
	echo "LIBS = $(LIBS)"; \
	echo ; \
	echo "PETSC_LIB = $(PETSC_LIB)"; \
	echo ; \


# null rule to force things to happen
FORCE :
